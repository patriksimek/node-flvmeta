// Generated by CoffeeScript 1.6.2
(function() {
  var cp, exec;

  cp = require('child_process');

  exec = function(filein, fileout, args, callback) {
    var error, output, process,
      _this = this;

    args.push(filein);
    if (fileout) {
      args.push(fileout);
    }
    process = cp.spawn('flvmeta', args);
    error = null;
    output = null;
    process.stdout.on('data', function(data) {
      var ex;

      try {
        return output = JSON.parse(data);
      } catch (_error) {
        ex = _error;
        return error = ex;
      }
    });
    process.stderr.on('data', function(data) {
      return error = new Error(data.toString().split('\n')[0]);
    });
    return process.on('close', function(code) {
      if (code === 0) {
        return callback(null, output);
      } else {
        if (code === 10 && args[0] === '-C') {
          return callback(null, output);
        } else {
          return callback(error, output);
        }
      }
    });
  };

  exports.update = function(file, options, callback) {
    var args, key, value, _ref, _ref1;

    args = ['-U', '-m', '-j'];
    if ((options != null ? options.resetTimestamps : void 0) === true) {
      args.push('-t');
    }
    if ((options != null ? options.allKeyframes : void 0) === true) {
      args.push('-k');
    }
    if ((options != null ? options.ignore : void 0) === true) {
      args.push('-i');
    }
    if ((options != null ? options.fix : void 0) === true) {
      args.push('-f');
    }
    if ((options != null ? options.preserve : void 0) === true) {
      args.push('-p');
    }
    if ((options != null ? options.noLastsecond : void 0) === true) {
      args.push('-s');
    }
    if (options != null ? options.add : void 0) {
      _ref = options.add;
      for (key in _ref) {
        value = _ref[key];
        args.push("-a=" + key + "=" + value);
      }
    }
    return exec(file, (_ref1 = options != null ? options.outputFile : void 0) != null ? _ref1 : null, args, callback);
  };

  exports.dump = function(file, options, callback) {
    var args;

    args = ['-D', '-j'];
    if (options != null ? options.event : void 0) {
      args.push("-e=" + options.event);
    }
    return exec(file, null, args, callback);
  };

  exports.fullDump = function(file, options, callback) {
    var args;

    args = ['-F', '-j'];
    return exec(file, null, args, callback);
  };

  exports.check = function(file, options, callback) {
    var args;

    args = ['-C', '-j'];
    if (options != null ? options.level : void 0) {
      args.push("-l=" + options.level);
    }
    if ((options != null ? options.quiet : void 0) === true) {
      args.push('-q');
    }
    return exec(file, null, args, callback);
  };

}).call(this);
